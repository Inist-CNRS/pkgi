<?php echo '#!/bin/sh'; ?> 
##3.5...10...15...20...25...30...35...40...45...50...55...60...65...70...75...80
## 
##  Debian / Linux / Ubuntu / LSB
##  Startup script for Express / Node.js application with start-stop-daemon
##
##

### BEGIN INIT INFO
# Provides:          express
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Express/NodeJS startup script
# Description:       This file provide a startup script for
#                    Express / NodeJS application  with
#                    the standard start-stop-daemon script
#                    and standard LSB directories 
### END INIT INFO

# Author: Nicolas Thouvenin <nthouvenin@gmail.com>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"


################################################################################
################################################################################
##                                                                            ##
#                         Configuration Section                                #
##                                                                            ##
################################################################################
################################################################################


DESC="Express server"
NAME=express
DAEMON_ARGS=""            
STARTTIME=2               # Time to wait for the server to start, in seconds

################################################################################

ROOT=`dirname $(readlink -f $0)`"/../.."
ROOT=`readlink -f $ROOT`
PATH=/sbin:/usr/sbin:/bin:/usr/bin
PATH=$PATH:$ROOT/sbin:$ROOT/usr/sbin:$ROOT/bin:$ROOT/usr/bin:$ROOT/local/bin
PATH=$PATH:$HOME/sbin:$HOME/usr/sbin:$HOME/bin:$HOME/usr/bin:$HOME/local/bin
DAEMON=$ROOT/usr/sbin/$NAME
PIDFILE=$ROOT/var/run/$NAME.pid
SCRIPTNAME=$ROOT/etc/init.d/$NAME


################################################################################
################################################################################
##                                                                            ##
#                    From /etc/init.d/skeleton                                 #
##                                                                            ##
################################################################################
################################################################################

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r $ROOT/etc/default/$NAME ] && . $ROOT/etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
VERBOSE=yes              

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILE --background --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	[ -n "$STARTTIME" ] && sleep $STARTTIME 
	running \
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE
	return 0
}

#
# Checks if the daemon/service is running
#
running() {
	status="0"
	pidofproc -p $PIDFILE $DAEMON >/dev/null || status="$?"
	return $status
}

case "$1" in
	start)
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		case "$?" in
			0|1) 
				log_end_msg 0 
				;;
			2)
				log_end_msg 1 
				;;
		esac
		;;
	stop)
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1) 
				log_end_msg 0 
				;;
			2)
				log_end_msg 1 
				;;
		esac
		;;
	status)
		running
		case "$?" in
			0) 
				[ "$VERBOSE" != no ] && log_daemon_msg "$NAME" "is running" 
				log_end_msg 0 
				;;
			4) 
				[ "$VERBOSE" != no ] && log_daemon_msg "could not access PID file for" "$NAME" 
				log_end_msg 1
				;;
			*) 
				[ "$VERBOSE" != no ] && log_daemon_msg "$NAME" "is not running" 
				log_end_msg 1
				;;
		esac
		;;
	#reload|force-reload)
		#
		# If do_reload() is not implemented then leave this commented out
		# and leave 'force-reload' as an alias for 'restart'.
		#
		#log_daemon_msg "Reloading $DESC" "$NAME"
		#do_reload
		#log_end_msg $?
		#;;
	restart|force-reload)
		#
		# If the "reload" option is implemented then remove the
		# 'force-reload' alias
		#
		log_daemon_msg "Restarting $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1)
				do_start
				case "$?" in
					0) 
						log_end_msg 0 
						;;
					1) 
						[ "$VERBOSE" != no ] && log_daemon_msg "Old process is still running"
						log_end_msg 1 
						;;
					*) 
						[ "$VERBOSE" != no ] && log_daemon_msg "Failed to start"
						log_end_msg 1 
						;; 
				esac
				;;
			*)
				[ "$VERBOSE" != no ] && log_daemon_msg "Failed to stop"
				log_end_msg 1
				;;
		esac
		;;
	*)
		echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
		exit 3
		;;
esac

